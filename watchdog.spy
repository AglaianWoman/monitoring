@import sys
@import os
@import xmpp
@import time
@import wwwclient.browse

@class Jabber
	
	@property name
	@property password
	@property jid
	@property client
	@property conn
	@property isRunning = False

	@constructor name, password
		self name     = name
		self password = password
		self jid      = xmpp protocol JID ' name
		self client   = xmpp Client ( jid getDomain (), debug = [] )
		start ()
	@end

	@method start
		if not isRunning
			var conn = client connect ()
			assert (conn)
			var auth = client auth ( jid getNode (), password, resource=jid getResource())
			assert (auth)
			isRunning = True
		end
	@end

	@method send recipient, message
		return client send ( xmpp protocol Message (recipient, message) )
	@end

	@method end
		if isRunning
			time sleep 1
			client disconnect ()
			isRunning = False
		end
	@end

@end

@class WebSite

	@property url
	@property method = "get"
	@property time

	@constructor url, time=None
		self url   = url
		self time = time
	@end

	@method check
		# FIXME: Add a request timeout
		var session = wwwclient browse Session (url, verbose=False)
		var data    = session get ()
		return session status () == 200
	@end

@end

@class ScreenSession

	@property name

	@constructor name
		self name = name
	@end

	@method check
		var screen_log = os popen "screen -ls" read () split ("\n")
		for line in screen_log
			if line find ' name != -1
				return True
			end
		end
		return False
	@end

@end

var RULES = [
	ScreenSession "ardap"
	WebSite       "http://www.datalicious.ca"
	WebSite       "http://www.ivy.fr"
	WebSite       "http://www.ivy.fr/blog"
	WebSite       "http://www.type-z.org"
	WebSite       "http://www.datalicious.ca:8888/chatclient"
]

var jabber = Jabber ("sebastien@njs.netlab.cz", "appleseed")
var notify = "sebastien@njs.netlab.cz"

var messages = []
for rule in RULES
	var result = rule check ()
	if not result
		messages append (" - Rule failed: " + str(rule))
	end
end
if messages
	jabber send (notify, "\n" join (messages))
end

jabber end ()

# EOF
